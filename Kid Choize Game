import pygame as pg
import random as ran

# Inisialisasi pygame
pg.init()
pg.mixer.init()

# Membuat jendela game
WIDTH, HEIGHT = 900, 600
screen = pg.display.set_mode((WIDTH, HEIGHT))
pg.display.set_caption('Kid Choize Game')

# Tambahkan image sebagai background
image = pg.image.load('a_bg_kitchen3.jpeg')
image = pg.transform.scale(image, (900, 600))

# Warna
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Kecepatan game I
FPS = 60
clock = pg.time.Clock()

# Menyimpan highest score dalam variable
highest_score = 0

# Memasukan suara background game
pg.mixer.music.load("a_sound_smile.mp3")
pg.mixer.music.set_volume(0.5)
pg.mixer.music.play(-1)

# Memasukan sound efek ship hit virus
hit_sound = pg.mixer.Sound("a_game-over-arcade-6435.mp3")
hit_sound.set_volume(0.5)

# Memasukan sound efek ship hit pizza
pizza_sound = pg.mixer.Sound("a_sound_minusscore.wav")
pizza_sound.set_volume(0.5)

# Memasukan sound efek untuk hit makanan sehat
eat_sound = pg.mixer.Sound("a_game-bonus-144751.mp3")
eat_sound.set_volume(0.5)

# Class untuk Player
class Player(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pg.image.load('a_player_kid.png')
        self.image = pg.transform.scale(self.image, (50, 60))  # ukuran player
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH // 2, HEIGHT - 150)
        self.speed = 7

    def update(self):
        keys = pg.key.get_pressed()

        # Default speed
        current_speed = self.speed

        # Jika [shift] ditekan bersama dengan tombol arah, kecepatan menjadi 2x lipat
        if (keys[pg.K_LSHIFT] or keys[pg.K_RSHIFT]) and (keys[pg.K_LEFT] or keys[pg.K_RIGHT] or keys[pg.K_UP] or keys[pg.K_DOWN]):
            current_speed = self.speed * 2

        # Gerakan player berdasarkan arah yang ditekan
        if keys[pg.K_LEFT] and self.rect.left > 0:
            self.rect.x -= current_speed
        if keys[pg.K_RIGHT] and self.rect.right < WIDTH:
            self.rect.x += current_speed
        if keys[pg.K_UP] and self.rect.top > 0:
            self.rect.y -= current_speed
        if keys[pg.K_DOWN] and self.rect.bottom < HEIGHT:
            self.rect.y += current_speed

# Class untuk Healthy Food (makanan sehat)
class HealthyFood(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        # Daftar gambar makanan sehat
        healthy_food_images = [
            pg.image.load('a_player_mango.png'),     # Gambar apel
            pg.image.load('a_player_safefood.png'),    # Gambar salad
            pg.image.load('a_player_vegies.png'),    # Gambar brokoli
        ]
        # Pilih gambar acak dari daftar
        self.image = ran.choice(healthy_food_images)
        self.image = pg.transform.scale(self.image, (40, 40))  # ukuran makanan sehat
        self.rect = self.image.get_rect()
        self.rect.x = ran.randint(0, WIDTH - 50)
        self.rect.y = ran.randint(-100, -50)
        self.speed = ran.randint(2, 4)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:  # jika makanan melewati layar, spawn kembali di atas
            self.rect.x = ran.randint(0, WIDTH - 50)
            self.rect.y = ran.randint(-100, -50)

# Class untuk Enemies
class Enemies(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pg.image.load('as_enemy_virus.png')
        self.image = pg.transform.scale(self.image, (40, 40))  # ukuran musuh yang lebih kecil
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = ran.randint(0, WIDTH - 80)
        self.rect.y = ran.randint(-100, -50)
        self.speed = ran.randint(1, 2)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.rect.x = ran.randint(0, WIDTH - 75)
            self.rect.y = ran.randint(-100, -50)
            self.speed = ran.randint(1, 2)

# Class untuk PizzaEnemy
class PizzaEnemy(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pg.image.load('a_enemy_junkfood.png')  # Gambar pizza
        self.image = pg.transform.scale(self.image, (40, 40))  # ukuran pizza
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = ran.randint(0, WIDTH - 70)
        self.rect.y = ran.randint(-100, -50)
        self.speed = ran.randint(1, 3)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.rect.x = ran.randint(0, WIDTH - 70)
            self.rect.y = ran.randint(-100, -50)

# Function menampilkan text
def draw_text(text, font, color, x, y):
    screen_text = font.render(text, True, color)
    screen.blit(screen_text, (x, y))

# Function untuk tombol menu
def draw_button(text, x, y, w, h, inactive_color, active_color, action=None):
    mouse = pg.mouse.get_pos()
    click = pg.mouse.get_pressed()

    if x + w > mouse[0] > x and y + h > y:
        pg.draw.rect(screen, active_color, (x, y, w, h))
        if click[0] == 1 and action is not None:
            action()
    else:
        pg.draw.rect(screen, inactive_color, (x, y, w, h))

    font = pg.font.SysFont(None, 48)
    text_surf = font.render(text, True, WHITE)
    screen.blit(text_surf, (x + (w / 22), y + (h / 5)))

# Function untuk memulai game
def start_game():
    global highest_score

    all_sprites = pg.sprite.Group()
    enemies = pg.sprite.Group()
    pizzas = pg.sprite.Group()
    healthy_foods = pg.sprite.Group()  # grup makanan sehat

    player = Player()
    all_sprites.add(player)

    # Tambahkan musuh
    for i in range(2):
        enemy = Enemies()
        all_sprites.add(enemy)
        enemies.add(enemy)

    # Tambahkan pizza musuh
    for i in range(3):
        pizza = PizzaEnemy()
        all_sprites.add(pizza)
        pizzas.add(pizza)

    # Tambahkan makanan sehat
    for i in range(5):  # Menambahkan 5 makanan sehat
        healthy_food = HealthyFood()
        all_sprites.add(healthy_food)
        healthy_foods.add(healthy_food)

    score = 0
    level = 1
    max_enemies = 8 # variabel untuk membatasi jumlah enemies
    run = True
    game_over = False
    

    while run:
        clock.tick(FPS)

        for event in pg.event.get():
            if event.type == pg.QUIT:
                run = False

        if score > 20 * level:
            level += 1
            if len(enemies) < max_enemies:
                for i in range(5):
                    enemy = Enemies()
                    enemy.speed = ran.randint(1 + level, 3 + level)
                    all_sprites.add(enemy)
                    enemies.add(enemy)

                # Tambahkan lebih banyak makanan sehat
                for i in range(3):
                    healthy_food = HealthyFood()
                    all_sprites.add(healthy_food)
                    healthy_foods.add(healthy_food)

        if not game_over:
            all_sprites.update()

            # Cek kolisi antara player dan enemy
            hits = pg.sprite.spritecollide(player, enemies, False)
            if hits:
                hit_sound.play()
                game_over = True
                if score > highest_score:
                    highest_score = score

            # Cek kolisi antara player dan pizza (mengurangi skor)
            pizza_hits = pg.sprite.spritecollide(player, pizzas, True)
            if pizza_hits:
                score -= 10  # Kurangi skor jika player menyentuh pizza
                if score < 0:
                    score = 0
                pizza_sound.play()

            # Cek kolisi antara player dan makanan sehat
            healthy_hits = pg.sprite.spritecollide(player, healthy_foods, True)
            if healthy_hits:
                score += 10  # Tambahkan skor jika player menyentuh makanan sehat
                eat_sound.play()  # Mainkan sound efek saat player menyentuh makanan sehat
                # Spawn ulang makanan sehat yang baru
                for hit in healthy_hits:
                    new_healthy_food = HealthyFood()
                    all_sprites.add(new_healthy_food)
                    healthy_foods.add(new_healthy_food)

        # Gambar latar belakang dan sprite
        screen.blit(image, (0, 0))
        all_sprites.draw(screen)

        # Gambar skor di layar
        font = pg.font.SysFont(None, 30)
        text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(text, (10, 10))

        text = font.render(f"Level: {level}", True, WHITE)
        screen.blit(text, (10, 30))

        if game_over:
            over_text = font.render(f"Game Over! Your Best Score : {highest_score}", True, WHITE)
            screen.blit(over_text, (WIDTH // 2 - 140, HEIGHT // 3 + 50))
            draw_button("Restart Game", WIDTH // 2 - 100, HEIGHT // 3 + 100, 250, 60, BLUE, RED, start_game)

        pg.display.flip()

    pg.quit()

# Function menu utama
def main_menu():
    menu = True
    while menu:
        screen.blit(image, (0, 0))
        font = pg.font.SysFont(None, 70)
        draw_text("Kid Choize Game!", font, WHITE, WIDTH // 4, HEIGHT // 7)
        draw_button("Start Game", WIDTH // 2 - 100, HEIGHT // 3, 200, 60, BLUE, RED, start_game)

        for event in pg.event.get():
            if event.type == pg.QUIT:
                menu = False

        pg.display.update()
        clock.tick(15)

# Memulai menu utama
main_menu()
